---
import type { GetStaticPaths, InferGetStaticParamsType } from "astro";
import { getSeedQuery } from "@/lib/seedQuery";
import { getTemplate } from "@/lib/templates";
import { getCollection } from "astro:content";
import { fetchAllPaginated, gql } from "@/lib/client";

export const getStaticPaths = (async () => {
	const wpCategories = await fetchAllPaginated(
		gql`
			query AllStaticTerms($fist: Int = 5, $after: String) {
				terms(
					first: $fist
					after: $after
					where: { taxonomies: [CATEGORY], hideEmpty: true }
				) {
					pageInfo {
						endCursor
						hasNextPage
					}
					nodes {
						... on UniformResourceIdentifiable {
							uri
						}
					}
				}
			}
		`,
		(data) => data.terms.nodes,
		(data) => data.terms.pageInfo
	);

	const wpContent = await fetchAllPaginated(
		gql`
			query AllStaticContent($fist: Int = 5, $after: String) {
				contentNodes(
					first: $fist
					after: $after
					where: { contentTypes: [POST, PAGE] }
				) {
					pageInfo {
						endCursor
						hasNextPage
					}
					nodes {
						... on UniformResourceIdentifiable {
							uri
						}
					}
				}
			}
		`,
		(data) => data.contentNodes.nodes,
		(data) => data.contentNodes.pageInfo
	);

	return [...wpContent, ...wpCategories, {}].map((nodeWithUri) => {
		return {
			params: { uri: nodeWithUri.uri },
			props: { uri: nodeWithUri.uri },
		};
	});
}) satisfies GetStaticPaths;

type Params = InferGetStaticParamsType<typeof getStaticPaths>;
// type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { uri = "/" } = Astro.params as Params;
// const uri = Astro.url.pathname || "/";

const { data } = await getSeedQuery({ uri });

const availableTemplates = await getCollection("templates");

const template = await getTemplate(
	data.nodeByUri,
	availableTemplates.map((template) => template.data)
);

if (template) {
	return Astro.rewrite(template.path);
}
---

<title>Not found</title>
<h1>
	We found you page but couldn't find a template by which to render the content.
</h1>
<pre>{JSON.stringify(template, null, 2)}</pre>
<pre>{JSON.stringify(data, null, 2)}</pre>
