---
import { gql, client } from "@/lib/client";

import Comment from "./comment.astro";

const postId = Astro.locals.nodeSeed.databaseId;

const CommentsByPostId = gql`
	query postComments($postId: ID!) {
		post(id: $postId, idType: DATABASE_ID) {
			comments {
				nodes {
					content
					databaseId
					parentDatabaseId
					author {
						node {
							name
						}
					}
					dateGmt
				}
			}
		}
	}
`;

const { data } = await client.query(
	CommentsByPostId,
	{ postId },
	{
		metadata: {
			requestPolicy: "cache-and-network",
		},
	}
);

const comments = data?.post?.comments?.nodes || [];

// Add test comments for development
const testComments = [
	{
		content: "<p>This is a test comment to demonstrate the comment system.</p>",
		databaseId: 999001,
		parentDatabaseId: null,
		author: {
			node: {
				name: "Test User 1",
			},
		},
		dateGmt: "2024-01-15T10:30:00",
	},
	{
		content:
			"<p>Another test comment with some more content to show how longer comments look.</p>",
		databaseId: 999002,
		parentDatabaseId: null,
		author: {
			node: {
				name: "Test User 2",
			},
		},
		dateGmt: "2024-01-15T14:45:00",
	},
];

// Use test comments if no real comments exist
const finalComments = comments.length > 0 ? comments : testComments;
---

<>
	{
		comments.length === 0 ? (
			<p>There are no comments.</p>
		) : (
			<ul class="flex flex-col gap-2">
				{testComments.map((comment) => {
					const { databaseId } = comment;
					return <Comment comment={comment} />;
				})}
			</ul>
		)
	}
</>
